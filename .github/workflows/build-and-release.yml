name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type for release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      is_prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set JAVA_HOME for Gradle
      run: |
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

    - name: Override Gradle properties for CI
      run: |
        echo "Creating CI-specific gradle.properties"
        cp gradle.properties gradle.properties.backup
        # 注释掉本地 Java 路径设置
        sed -i 's/^org.gradle.java.home=/#&/' gradle.properties
        echo "" >> gradle.properties
        echo "# CI environment - use system JAVA_HOME" >> gradle.properties
        echo "# Disable dependency check in CI for faster builds" >> gradle.properties
        echo "org.gradle.jvmargs=-Xmx3G -XX:MaxMetaspaceSize=1G" >> gradle.properties
        echo "Current gradle.properties after modification:"
        cat gradle.properties

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Debug Gradle setup
      run: |
        echo "=== Environment Check ==="
        echo "JAVA_HOME: $JAVA_HOME"
        which java
        java -version
        echo ""
        echo "=== Gradle Wrapper Check ==="
        ls -la gradlew*
        echo ""
        echo "=== Gradle Properties ==="
        cat gradle.properties

    - name: Validate Gradle wrapper
      run: ./gradlew --version

    - name: Get current version from gradle.properties
      id: get_version
      run: |
        VERSION=$(grep "mod_version" gradle.properties | cut -d'=' -f2)
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Determine version and build type
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual release build
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          echo "Building release version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "build_type=release" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.inputs.is_prerelease }}" >> $GITHUB_OUTPUT
        else
          # Automatic dev build
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          DEV_VERSION="${{ steps.get_version.outputs.current_version }}-dev+$SHORT_SHA"
          echo "Building dev version: $DEV_VERSION"
          echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
          echo "build_type=dev" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        fi

    - name: Update version for dev builds
      if: steps.version.outputs.build_type == 'dev'
      run: |
        sed -i "s/mod_version=.*/mod_version=${{ steps.version.outputs.version }}/" gradle.properties

    - name: Build mod
      run: |
        set -e  # Exit on any error
        echo "=== Environment Information ==="
        echo "Java version:"
        java -version
        echo ""
        echo "Java Home: $JAVA_HOME"
        echo ""
        echo "=== Gradle Configuration ==="
        echo "Gradle wrapper version:"
        ./gradlew --version
        echo ""
        echo "=== Current Directory ==="
        pwd
        ls -la
        echo ""
        echo "=== Building Project ==="
        echo "Running: ./gradlew clean build --no-daemon --stacktrace -x dependencyCheckAnalyze"
        ./gradlew clean build --no-daemon --stacktrace -x dependencyCheckAnalyze
        echo ""
        echo "=== Build Results ==="
        echo "Build artifacts:"
        ls -la build/libs/ || echo "No build/libs directory found"

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: mod-jar-${{ steps.version.outputs.version }}
        path: build/libs/*.jar

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build/reports/
          ~/.gradle/daemon/*/daemon-*.out.log
        if-no-files-found: ignore

    - name: Create Release (Manual trigger only)
      if: github.event_name == 'workflow_dispatch'
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Experience Bar Fix v${{ steps.version.outputs.version }}
        body: |
          ## Experience Bar Fix v${{ steps.version.outputs.version }}
          
          ### Changes in this release
          - Fixes experience bar disappearing issue after teleportation
          - Compatible with Minecraft 1.20.1 and Forge 47.2.0+
          
          ### Installation
          1. Download the jar file below
          2. Place it in your mods folder
          3. Run Minecraft with Forge
          
          ### Configuration
          The mod supports configuration through the config file located in `config/experiencebarfix-common.toml`
          
          **Built from commit:** ${{ github.sha }}
        draft: false
        prerelease: ${{ steps.version.outputs.is_prerelease }}
        files: build/libs/experiencebarfix-${{ steps.version.outputs.version }}.jar

    - name: Create Dev Release (Push to main/develop only)
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      id: create_dev_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: dev-${{ steps.version.outputs.version }}
        name: Experience Bar Fix Dev Build ${{ steps.version.outputs.version }}
        body: |
          ## Development Build - Experience Bar Fix ${{ steps.version.outputs.version }}
          
          ⚠️ **This is a development build and may contain bugs!**
          
          ### What's included
          - Latest development changes
          - Experimental features and fixes
          - Built from the latest commit on ${{ github.ref_name }}
          
          ### Installation
          1. Download the jar file below
          2. Place it in your mods folder
          3. Run Minecraft with Forge 47.2.0+
          
          **Built from commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
        draft: false
        prerelease: true
        files: build/libs/experiencebarfix-${{ steps.version.outputs.version }}.jar

  cleanup-dev-releases:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Cleanup old dev releases
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          // Filter dev releases and sort by creation date
          const devReleases = releases
            .filter(release => release.tag_name.startsWith('dev-'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          // Keep only the latest 5 dev releases
          const releasesToDelete = devReleases.slice(5);
          
          for (const release of releasesToDelete) {
            console.log(`Deleting old dev release: ${release.tag_name}`);
            
            // Delete the release
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
            });
            
            // Delete the tag
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`,
              });
            } catch (error) {
              console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
            }
          }
